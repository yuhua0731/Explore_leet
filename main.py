#!/usr/bin/env python3
from solution import ListNode, Solution, TreeNode


def main():
    solu = Solution()
    print(solu.isIsomorphic('apple', 'heelo'))
    print(solu.numDecodingsWithStar('1234**01*0'))
    print(solu.lengthOfLIS([1, 3, 6, 7, 9, 4, 10, 5, 6]))
    print(solu.findLength([1, 2, 3, 2, 1], [3, 2, 1, 4, 7]))
    print(solu.findPeakElement([1, 2, 5, 3, 7, 4, 10]))
    print(solu.fourSum([1, 0, -1, 0, -2, 2], 0))
    print(solu.triangleNumber([2, 2, 3, 4]))
    a = ListNode(1, next=ListNode(2, next=ListNode(
        3, next=ListNode(4, next=ListNode(5)))))
    ListNode.printList(solu.reverseKGroup(a, 2))
    p = solu.shuffle([1, 2, 3, 4, 5, 6])
    print(p.shuffle())
    print(p.reset())
    solu.sortedArrayToBST([1, 2, 3, 4, 5, 7, 10]).printNode()
    print(solu.threeSumClosest([0, -1, -1, 2, 3, 6, -4, -2, 3, 5, -1], -3))
    print(solu.twoSum([1, 2, 3, 4, 7], 10))
    print(solu.largestIsland([[1, 1], [1, 1]]))
    print(solu.subsetsWithDup([4, 4, 4, 1, 4]))
    print(list(solu.powerset([1, 2, 3])))
    a = TreeNode(1)
    a.left = TreeNode(2)
    a.right = TreeNode(2)
    print(solu.pathSum(a, 3))
    print(solu.stoneGame([3, 101, 3]))
    print(solu.matrixRankTransform([[7, 8], [8, 7]]))
    print(solu.groupAnagrams(["ddbdddd", "bcb"]))
    print(solu.canReorderDoubled([-2, 2, -4, 4]))
    print(solu.minWindow("ADBEBANC", "ABC"))
    print(solu.numDecodings('0')) # 0
    print(solu.numDecodings('06')) # 0
    print(solu.numDecodings('2101')) # 1
    print(solu.isValidSudoku([["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]))
    print(solu.solveSudoku([["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]))
    print(solu.rectangleArea([[0,0,2,2],[1,1,2,4]]))
    print(solu.findGCD([1, 2, 3, 5, 10]))
    print(solu.findDifferentBinaryString(["001","000","000"]))
    print(solu.minimizeTheDifference([[1, 2, 3], [3, 4, 0]], 5))
    print(solu.minimizeTheDifference([[24,18,31,34,31,47,47,27,32,44,19,26,15,11,32,39,17,36,28,45,44,45,6,38,47,37,7,5,23,12,35,10,27,5,6,44,42,3,9],[19,25,15,46,43,44,22,29,12,34,19,8,10,35,49,28,7,22,34,16,46,33,17,11,11,30,46,16,26,23,49,37,47,10,30,29,47,2,39],[25,48,12,26,33,4,31,18,26,17,46,47,27,46,42,31,24,36,22,46,48,43,6,49,47,15,35,40,13,26,43,25,41,1,21,30,34,46,30],[42,12,7,2,26,14,47,37,39,25,14,7,25,36,50,13,18,48,38,38,13,32,40,9,1,40,44,28,31,17,33,37,12,30,46,14,49,5,23],[1,32,35,43,43,5,49,38,32,44,22,30,18,33,30,2,6,40,49,23,12,49,49,26,17,44,41,47,9,4,11,32,25,30,44,19,10,1,19],[36,30,1,24,3,35,25,37,29,14,44,20,32,42,9,31,45,35,46,20,5,17,21,20,22,42,20,42,42,26,34,6,33,41,14,26,39,34,10],[33,41,6,20,3,15,30,36,15,34,18,4,8,8,44,25,24,14,21,23,5,22,30,24,11,32,29,19,30,9,46,29,41,14,18,21,11,7,16],[31,13,49,44,24,12,23,9,9,15,18,36,41,25,26,48,22,18,47,39,33,38,45,47,21,48,26,49,46,46,41,49,46,19,35,40,41,43,5],[24,20,26,31,12,17,23,29,31,6,12,21,25,9,2,7,23,11,23,5,47,49,42,28,1,35,21,16,39,25,35,19,31,41,10,24,21,13,32],[7,10,14,22,17,10,27,24,17,6,22,13,16,46,16,47,40,3,22,24,42,50,40,4,10,12,5,28,29,50,18,9,21,34,37,8,22,42,50],[46,40,26,15,4,26,50,31,32,40,21,35,40,39,6,38,33,35,43,32,26,45,30,11,27,25,34,29,3,7,29,38,9,8,44,33,12,5,26],[20,30,46,1,17,7,43,23,15,12,2,10,28,43,6,22,42,30,4,31,16,5,31,9,36,2,9,45,33,35,4,4,13,35,1,34,22,44,34],[16,9,24,32,1,9,35,8,16,7,30,14,4,40,14,41,25,22,40,42,26,46,34,33,50,44,11,33,7,10,41,14,12,25,13,20,22,28,10],[28,9,26,21,20,7,36,7,31,18,19,34,49,32,18,15,27,45,9,45,36,43,7,2,39,36,49,13,14,13,26,38,3,42,9,41,2,48,17],[45,47,31,35,4,48,50,15,10,39,21,3,45,13,7,9,41,45,35,12,49,6,44,30,41,19,14,11,21,45,18,34,37,5,27,27,43,47,3],[30,20,43,8,41,45,47,18,2,14,27,22,17,35,47,26,38,34,48,13,28,50,9,45,11,29,30,23,25,31,40,17,40,13,38,31,29,13,49],[31,37,22,20,5,11,24,39,41,31,15,50,40,42,43,37,9,44,20,14,35,20,7,1,2,13,21,4,21,35,17,47,43,22,29,5,27,31,46],[2,19,38,37,9,14,10,11,39,50,25,47,5,41,38,29,18,42,6,32,31,16,10,37,20,15,13,40,46,22,38,40,45,26,34,27,16,42,14],[36,4,17,43,16,9,40,47,26,28,8,30,26,26,31,25,19,14,16,15,4,35,34,6,39,35,44,1,4,25,46,28,26,15,33,18,7,24,33],[24,34,32,38,5,46,30,48,45,15,18,2,2,31,3,9,42,10,14,21,16,35,4,40,10,42,19,49,7,42,36,35,6,44,43,9,28,46,9],[3,20,33,43,18,31,4,36,23,49,22,44,7,39,24,7,39,23,24,41,18,31,19,33,39,10,2,3,22,28,41,1,23,44,35,46,4,43,5],[45,35,33,40,50,28,28,27,16,12,11,40,3,2,38,49,47,23,44,12,19,2,3,16,37,15,26,5,24,8,39,5,16,15,36,13,7,1,45],[26,6,33,18,38,42,15,4,34,34,34,26,28,9,10,28,9,30,48,24,4,37,12,34,29,28,39,42,29,11,32,39,9,23,10,2,17,46,12],[10,41,27,37,41,17,29,31,30,13,28,28,18,50,15,23,49,41,3,26,40,2,28,20,2,36,31,37,17,44,18,16,30,46,30,24,34,40,30],[43,16,36,35,11,30,19,49,24,27,8,33,44,16,48,42,43,25,8,28,39,30,40,34,30,6,48,25,29,40,50,46,45,48,24,36,23,11,10],[15,43,42,12,27,29,32,46,47,12,27,17,21,37,26,20,42,46,17,43,21,43,1,26,38,3,14,30,7,8,1,24,21,39,21,47,26,12,48],[21,6,34,39,31,26,40,16,29,7,39,2,23,2,20,32,9,46,46,4,1,22,26,31,42,40,1,31,41,37,14,15,48,40,21,11,22,20,50],[26,37,39,47,32,30,49,18,6,33,14,37,24,16,24,24,12,16,35,42,47,40,15,14,38,30,16,26,18,38,14,33,11,1,26,50,31,48,24],[42,12,44,13,47,45,39,12,32,40,1,47,9,14,46,14,1,40,6,30,50,41,13,48,12,18,26,40,2,1,24,8,20,3,37,24,31,25,8],[5,30,12,10,50,30,42,5,18,10,31,35,5,34,46,19,19,2,36,36,14,5,27,9,12,38,20,30,13,3,45,22,30,4,10,15,40,23,41],[20,45,42,7,13,10,15,2,21,8,18,7,24,50,5,33,46,40,9,23,9,28,47,48,13,20,36,49,2,49,2,22,41,10,47,5,35,49,4],[9,48,32,27,44,23,31,43,19,20,5,41,10,48,8,1,6,10,23,46,10,20,50,37,44,35,9,6,15,37,47,50,48,15,22,6,12,43,28]], 145))
    print(solu.minimizeTheDifference([[43,3,22,28,32,42,36,23,12,34,8,43,3,9,44,25,10,27,50,49,48,15,41,18,40,35,45,8,6,33,37,47,40,12,13,43],[40,44,46,5,35,21,9,33,16,16,44,30,44,26,30,7,21,15,4,23,7,26,2,37,8,48,17,23,36,16,22,28,15,3,9,11],[9,47,11,26,10,7,42,20,49,28,30,1,8,28,1,45,7,3,13,28,1,13,25,21,10,12,18,18,17,37,15,34,20,20,37,27],[32,31,25,50,19,26,12,42,27,19,37,30,34,28,37,45,21,35,5,37,1,17,27,38,30,47,6,33,35,31,34,41,18,11,14,24],[7,48,15,14,28,9,33,13,33,25,11,5,20,30,10,49,33,6,48,24,44,12,15,36,3,28,36,3,26,35,49,20,15,11,47,26],[15,13,37,15,33,17,36,18,39,17,11,2,42,40,26,33,46,4,4,32,13,36,21,19,47,42,3,30,22,12,29,4,14,24,17,48],[29,17,44,33,17,4,47,21,1,27,42,15,12,25,45,44,31,9,28,45,19,5,43,12,49,4,27,5,35,38,10,2,2,24,14,44],[42,37,49,35,31,28,43,50,40,45,38,22,7,1,5,14,2,47,34,50,34,2,10,2,19,17,8,2,42,38,2,23,18,7,25,43],[43,41,43,12,27,1,16,14,11,40,46,28,35,3,37,18,7,16,38,16,4,14,43,16,44,12,40,1,11,8,38,13,42,16,19,22],[45,6,42,14,41,9,37,16,7,24,32,45,12,14,14,25,19,1,6,15,37,20,42,24,19,35,50,20,43,3,49,20,6,31,33,43],[9,39,37,23,19,40,28,39,28,42,7,35,12,42,39,15,40,41,9,5,30,6,39,10,31,2,10,25,13,31,24,34,42,9,28,13],[7,22,22,20,28,9,16,38,17,31,21,1,47,3,1,8,14,19,4,29,33,49,15,14,16,5,3,2,8,25,8,27,37,38,28,41],[33,2,49,48,2,12,8,13,15,6,46,18,34,35,18,8,50,12,50,39,20,13,48,39,6,12,44,2,1,43,7,42,30,30,2,42],[38,1,15,45,22,44,5,16,45,18,49,8,11,13,6,28,18,32,8,18,39,40,10,21,25,15,38,15,13,32,29,8,32,26,42,21],[46,4,30,3,28,30,47,43,46,45,16,36,27,36,42,49,4,43,34,26,18,8,29,19,20,48,27,16,49,44,49,11,45,16,8,49],[2,18,35,45,9,25,28,38,47,3,44,44,9,46,42,3,4,14,3,46,17,35,49,12,11,32,23,44,6,46,28,36,40,11,7,27],[19,16,1,41,14,50,18,4,15,14,44,31,34,48,32,29,49,2,3,20,27,34,40,42,34,14,28,7,30,30,34,43,11,36,12,20],[40,10,46,35,8,34,12,2,22,47,4,40,48,39,18,41,26,21,39,39,37,41,9,5,37,16,10,38,22,46,21,4,14,39,4,13],[24,4,1,50,44,32,26,39,10,46,4,39,42,27,5,21,11,34,34,16,7,17,17,22,32,47,44,18,30,47,14,22,36,1,40,1],[48,39,48,38,7,27,28,27,40,30,37,18,27,49,1,17,2,2,11,39,42,23,14,14,6,36,23,19,22,4,8,22,44,47,20,12],[43,10,17,17,32,33,36,50,35,17,19,37,21,34,49,38,36,30,28,25,6,26,6,34,10,7,21,26,31,50,44,38,6,48,27,26],[29,40,18,31,2,36,32,35,24,41,27,48,13,39,6,1,12,44,17,46,2,19,3,43,28,50,20,26,45,16,43,28,33,18,39,25],[26,18,1,17,12,19,1,13,2,13,12,21,18,37,13,49,44,45,22,25,38,9,2,4,7,16,27,43,8,25,20,9,18,13,26,3]], 666))
    print(solu.complexNumberMultiply('1+1i', '1+1i'))
    print(solu.judgeSquareSum(4))
    print(solu.judgeSquareSum(2 ** 31 - 1))
    print(solu.isValidSerialization("9,3,4,#,#,1,#,#,2,#,6,#,#"))
    print(solu.isValidSerialization("1"))
    print(solu.isValidSerialization("9,#,#,1"))
    print(solu.findLUSlength(['aaa', 'cc', 'aaa']))
    print(solu.minPatches([1, 2, 2], 5))
    print(solu.minPatches([1, 3], 6))
    print(solu.minPatches([1,7,21,31,34,37,40,43,49,87,90,92,93,98,99], 12))
    print(solu.maxCount(3, 3, [[2,2],[3,3],[3,3],[3,3],[1,2],[3,3],[3,3],[3,1],[2,2],[3,3],[3,3],[3,3]]))
    print(solu.minimumDifference([9,4,1,7], 2))
    print(solu.minimumDifference([9], 1))
    print(solu.kthLargestNumber(["2","21","12","1"], 3))
    print(solu.minSessions([1,2,3], 3))
    print(solu.minSessions([3,1,3,1,1], 8))
    print(solu.minSessions([2,3,3,4,4,4,5,6,7,10], 12))
    print(solu.minSessions([1,1,1,1,1,1,1,1,1,1,1,1,1,1], 14))
    print(solu.numberOfUniqueGoodSubsequences("100101"))
    print(solu.findMin([4,5,6,7,0,1,2]))
    print(solu.arrayNesting([0,2,1]))
    print(solu.arrayNesting([5,4,0,3,1,6,2]))
    print(solu.recoverArray(4, [0,0,5,5,4,-1,4,9,9,-1,4,3,4,8,3,8]))
    print(solu.minTimeToType('bza'))
    print(solu.maxMatrixSum([[-10000,-10000,-10000],[-10000,-10000,-10000],[-10000,-10000,-10000]]))
    for i in solu.generateTrees(3):
        print("TreeNode: ")
        i.printNode()
        print("TreeNode end")
    print(solu.countPaths(7, [[0,6,7],[0,1,2],[1,2,3],[1,3,3],[6,3,3],[3,5,1],[6,5,1],[2,5,1],[0,4,5],[4,6,2]]))

if __name__ == "__main__":
    main()
