#!/usr/bin/env python3
from solution import ListNode, Solution, TreeNode


def main():
    solu = Solution()
    print(solu.isIsomorphic('apple', 'heelo'))
    print(solu.numDecodingsWithStar('1234**01*0'))
    print(solu.lengthOfLIS([1, 3, 6, 7, 9, 4, 10, 5, 6]))
    print(solu.findLength([1, 2, 3, 2, 1], [3, 2, 1, 4, 7]))
    print(solu.findPeakElement([1, 2, 5, 3, 7, 4, 10]))
    print(solu.fourSum([1, 0, -1, 0, -2, 2], 0))
    print(solu.triangleNumber([2, 2, 3, 4]))
    a = ListNode(1, next=ListNode(2, next=ListNode(
        3, next=ListNode(4, next=ListNode(5)))))
    ListNode.printList(solu.reverseKGroup(a, 2))
    p = solu.shuffle([1, 2, 3, 4, 5, 6])
    print(p.shuffle())
    print(p.reset())
    solu.sortedArrayToBST([1, 2, 3, 4, 5, 7, 10]).printNode()
    print(solu.threeSumClosest([0, -1, -1, 2, 3, 6, -4, -2, 3, 5, -1], -3))
    print(solu.twoSum([1, 2, 3, 4, 7], 10))
    print(solu.largestIsland([[1, 1], [1, 1]]))
    print(solu.subsetsWithDup([4, 4, 4, 1, 4]))
    print(list(solu.powerset([1, 2, 3])))
    a = TreeNode(1)
    a.left = TreeNode(2)
    a.right = TreeNode(2)
    print(solu.pathSum(a, 3))
    print(solu.stoneGame([3, 101, 3]))
    print(solu.matrixRankTransform([[7, 8], [8, 7]]))
    print(solu.groupAnagrams(["ddbdddd", "bcb"]))
    print(solu.canReorderDoubled([-2, 2, -4, 4]))
    print(solu.minWindow("ADBEBANC", "ABC"))
    print(solu.numDecodings('0')) # 0
    print(solu.numDecodings('06')) # 0
    print(solu.numDecodings('2101')) # 1
    print(solu.isValidSudoku([["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]))
    print(solu.solveSudoku([["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]))
    print(solu.rectangleArea([[0,0,2,2],[1,1,2,4]]))
    print(solu.findGCD([1, 2, 3, 5, 10]))
    print(solu.findDifferentBinaryString(["001","000","000"]))
    print(solu.minimizeTheDifference([[1, 2, 3], [3, 4, 0]], 5))
    print(solu.complexNumberMultiply('1+1i', '1+1i'))
    print(solu.judgeSquareSum(4))
    print(solu.judgeSquareSum(2 ** 31 - 1))
    print(solu.isValidSerialization("9,3,4,#,#,1,#,#,2,#,6,#,#"))
    print(solu.isValidSerialization("1"))
    print(solu.isValidSerialization("9,#,#,1"))
    print(solu.findLUSlength(['aaa', 'cc', 'aaa']))
    print(solu.minPatches([1, 2, 2], 5))
    print(solu.minPatches([1, 3], 6))
    print(solu.minPatches([1,7,21,31,34,37,40,43,49,87,90,92,93,98,99], 12))
    print(solu.maxCount(3, 3, [[2,2],[3,3],[3,3],[3,3],[1,2],[3,3],[3,3],[3,1],[2,2],[3,3],[3,3],[3,3]]))
    print(solu.minimumDifference([9,4,1,7], 2))
    print(solu.minimumDifference([9], 1))
    print(solu.kthLargestNumber(["2","21","12","1"], 3))
    print(solu.minSessions([1,2,3], 3))
    print(solu.minSessions([3,1,3,1,1], 8))
    print(solu.minSessions([2,3,3,4,4,4,5,6,7,10], 12))
    print(solu.minSessions([1,1,1,1,1,1,1,1,1,1,1,1,1,1], 14))
    print(solu.numberOfUniqueGoodSubsequences("100101"))
    print(solu.findMin([4,5,6,7,0,1,2]))
    print(solu.arrayNesting([0,2,1]))
    print(solu.arrayNesting([5,4,0,3,1,6,2]))
    print(solu.recoverArray(4, [0,0,5,5,4,-1,4,9,9,-1,4,3,4,8,3,8]))
    print(solu.minTimeToType('bza'))
    print(solu.maxMatrixSum([[-10000,-10000,-10000],[-10000,-10000,-10000],[-10000,-10000,-10000]]))
    for i in solu.generateTrees(3):
        print("TreeNode: ")
        i.printNode()
        print("TreeNode end")
    print(solu.countPaths(7, [[0,6,7],[0,1,2],[1,2,3],[1,3,3],[6,3,3],[3,5,1],[6,5,1],[2,5,1],[0,4,5],[4,6,2]]))
    print(solu.numberOfCombinations('312'))
    print(solu.outerTrees([[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]))
    print(solu.outerTrees([[1,2],[2,2],[4,2]]))
    print(solu.orderlyQueue('bdcbc', 3))
    print(solu.countQuadruplets([1,1,1,3,5]))
    print(solu.countQuadruplets([3,3,6,4,5]))
    print(solu.countQuadruplets([1,2,3,6]))
    print(solu.numberOfWeakCharacters([[5,5],[6,3],[3,6]]))
    print(solu.numberOfWeakCharacters([[1,5],[10,4],[4,3]]))
    print(solu.firstDayBeenInAllRooms([0,0]))
    print(solu.firstDayBeenInAllRooms([0,0,2]))
    print(solu.firstDayBeenInAllRooms([0,1,2,0]))
    print(solu.gcdSort([1, 2, 3, 100, 7]))
    print(solu.findMiddleIndex([2,3,-1,8,4]))
    print(solu.findMiddleIndex([-1,1,-1]))
    print(solu.findFarmland([[1,0,0],[0,1,1],[0,1,1]]))
    print(solu.orderOfLargestPlusSign(5, [[4,2]]))
    print(solu.reachableNodes([[0,1,10],[0,2,1],[1,2,2]], 6, 3))
    print(solu.reachableNodes([[0,1,4],[1,2,6],[0,2,8],[1,3,1]], 10, 4))
    print(solu.maxNumberOfBalloons("loonbalxballpoon"))
    print(solu.reverseOnlyLetters("Test1ng-Leet=code-Q!"))
    print(solu.spiralOrder([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))
    print(solu.addOperators("103", 3))
    print(solu.addOperators("00", 0))
    print(solu.addOperators("3456237490", 911))
    print(solu.tribonacci(25))
    print(solu.canPartitionKSubsets([18,20,39,73,96,99,101,111,114,190,207,295,471,649,700,1037], 4))
    print(solu.calculateMinimumHP([[-2,-3,3],[-5,-10,1],[10,30,-5]]))
    print(solu.rob([2,1,1,2]))
    print(solu.rob_2([2,1,1,2]))
    print(solu.deleteAndEarn([2,2,3,3,3,4]))
    print(solu.findWords([["o","a","a","n"],["e","t","a","e"],["i","h","k","r"],["i","f","l","v"]],["oath","pea","eat","rain"]))
    print(solu.findWords([["a", "a"]],["aaa"]))
    print(solu.canJump([3,2,1,0,4]))
    print(solu.jump([2,3,0,1,4]))
    print(solu.jump([1,2,1,1,1,4,4,1,5,2,3,4,1,4,2,5,2,6,4,4,2,2,5,6,2,3,4,5,4,4,2,3,1,4,1,6,2,3,5,3,6,6,1,2,5,3,3,4,6,1,1,5,3,3,4,5,1,4,2,6,6,4,1,4,1,2,1,4,4,2,1,2,2,5,6,5,4,4,3,6,5,2,5,6,1,4,3,4,3,3,1,2,6,5,3,6,1,2,6,4,2,3,3,4,6,3,5,3,2,3,3,1,3,2,4,1,3,5,1,1,5,2,4,2,2,5,3,4,2,1,3,3,1,2,4,5,4,6,2,5,6,4,6,5,2,2,1,4,6,4,2,4,1,6,3,3,6,1,4,5,4,5,1,2,3,6,1,4,3,2,5,1,5,2,5,1,2,3,3,6,6,3,5,2,6,1,6,4,3,4,1,2,5,1,5,6,5,3,1,5,6,3,6,3,5,6,2,2,6,3,4,1,4,1,1,3,4,1,5,6,5,4,2,5,3,6,4,1,2,3,5,6,5,2,3,6,1,3,4,6,3,2,5,5,1,6,6,6,2,3,5,5,4,5,2,1,6,6,2,5,1,3,2,5,1,2,3,4,1,1,5,1,4,1,2,2,6,1,4,3,2,1,6,5,1,6,2,3,5,3,6,6,5,2,1,4,4,5,3,5,5,1,3,2,6,1,6,6,4,6,5,3,3,1,6,2,6,4,2,4,1,2,2,2,2,1,5,4,3,6,3,2,5,5,4,6,4,1,5,2,4,6,2,4,5,5,3,4,6,6,1,6,6,5,3,1,4,6,5,3,5,3,5,2,3,4,6,2,5,6,6,2,5,6,1,1,5,4,5,6,6,5,5,3,3,4,4,5,2,6,5,1,3,2,3,1,3,1,2,3,5,2,5,3,2,2,3,4,4,2,6,5,1,3,4,6,1,6,4,4,2,4,5,2,5,6,6,1,3,1,1,4,6,5,6,4,1,3,1,1,6,2,6,4,5,5,3,5,3,6,6,2,1,3,2,5,5,3,5,3,3,5,3,2,1,2,2,6,1,6,4,2,2,2,6,2,4,2,5,5,2,3,1,1,5,6,6,3,4,6,2,1,2,1,4,2,5,6,5,5,3,2,1,5,1,3,2,2,5,1,6,1,6,5,6,2,6,3,6,5,1,4,6,3,3,6,6,4,1,4,6,3,4,1,4,2,5,5,5,4,2,5,6,6,3,1,5,4,2,3,6,1,6,4,1,5,5,6,4,5,4,4,6,5,2,5,1,4,3,2,6,1,5,2,6,2,6,1,2,3,5,5,4,4,5,4,2,1,4,1,4,6,1,1,2,6,2,3,6,4,4,5,6,6,4,1,6,3,2,4,1,4,5,5,2,6,6,4,2,5,4,6,6,5,2,4,1,1,4,1,1,4,6,1,5,2,4,6,5,1,6,6,6,2,1,6,1,5,5,4,5,2,3,2,2,2,6,4,6,2,4,6,4,5,1,3,2,4,2,6,6,4,3,3,1,1,4,4,5,5,4,1,6,5,1,3,3,6,5,5,3,6,3,5,2,4,3,4,6,5,2,6,6,1,2,3,4,6,1,5,6,4,6,6,1,1,2,4,6,4,1,1,6,6,2,1,1,2,3,6,5,3,1,6,1,3,6,2,4,5,3,2,5,3,5,5,2,1,3,4,4,6,2,4,3,3,1,5,3,3,1,2,5,2,5,2,2,4,2,2,4,6,3,1,4,2,3,4,2,2,6,3,2,6,3,3,5,5,5,2,3,1,6,5,4,5,2,6,5,2,1,2,2,2,2,2,3,2,6,3,1,5,6,1,4,6,5,3,3,5,5,6,5,1,4,3,5,5,3,4,6,4,6,3,2,1,1,6,2,2,5,5,3,1,3,5,6,3,6,2,5,6,2,1,4,4,2,2,6,2,1,5,6,1,1,3,3,5,5,3,2,5,2,1,3,2,4,3,5,2,5,5,4,1,1,3,4,3,1,3,5,5,4,5,5,1,3,5,4,6,5,4,2,1,2,6,6,4,4,5,6,6,6,3,4,3,5,2,5,6,5,2,1,4,5,3,1,6,4,1,5,4,5,2,5,1,4,2,6,3,3,5,1,3,4,3,3,6,6,5,5,5,4,5,3,6,6,6,4,2,4,4,1,2,2,2,3,2,2,5,6,5,6,3,3,1,1,4,1,6,6,5,3,2,6,5,2,1,6,1,4,6,4,1,2,1,2,5,1,1,6,3,2,5,4,5,2,6,5,6,2,2,1,5,5,1,6,2,1,3,4,5,4,3,1,5,6,5,4,1,2,3,4,2,2,6,2,4,3,2,5,3,2,2,5,6,3,3,2,1,4,5,2,3,2,5,3,1,3,6,3,6,4,2,5,3,6,1,6,5,2,1,5,2,1,1,4,3,3,1,1,2,2,1,1,4,1,6,5,5,6,4,6,6,2,2,2,6,1,1,1,1,5,2,2,1,6,5,6,1,3,1,6,4,1,2,1,5,1,1,3,6,4,5,4,2,3,4,1,5,2,2,1,6,2,3,2,3,3,1,1,4,5,5,3,5,3,6,4,5,4,4,4,2,2,1,4,6,0,0,0,0,0]))
    print(solu.maxProduct([2,3,-2,4]))
    print(solu.maxProduct([-2]))
    print(solu.getMaxLen([1,2,3,5,-6,4,0,10]))
    print(solu.maxScoreSightseeingPair([8,1,5,2,6]))
    print(solu.numSquares(2))
    print(solu.numSquares(13))
    print(solu.numSquares(9999))
    print(solu.wordBreak("applepenapple", ["apple","pen"]))
    print(solu.trap([0,1,0,2,1,0,1,3,2,1,2,1]))
    print(solu.trap([4,2,0,3,2,5]))
    print(solu.maxProfitIII([3,3,5,0,0,3,1,4]))
    print(solu.maxProfitIII([1,2,3,4,5]))
    print(solu.nextGreaterElement([4,1,2], [1,3,4,2]))
    print(solu.matrixBlockSum([[1,2,3],[4,5,6],[7,8,9]], 1))
    print(solu.matrixBlockSum([[67,64,78],[99,98,38],[82,46,46],[6,52,55],[55,99,45]], 1))
    print(solu.reverseWords("this is  an   example"))
    print(solu.uniquePathsWithObstacles([[0,0,0],[0,1,0],[0,0,0]]))
    print(solu.frequencySort("raaeaedere"))
    print(solu.longestPalindrome("bapbab"))
    print(solu.longestPalindromeSubseq("bbbab"))
    print(solu.coinChange([1,2,5], 11))
    print(solu.change(6, [2, 4]))
    print(solu.threeSum([-1,0,1,2,-1,-4]))
    print(solu.threeSum([0]))
    print(solu.orangesRotting([[2,1,1],[1,1,0],[0,1,1]]))
    print(solu.orangesRotting([[2,1,1],[1,1,0],[0,0,1]]))
    print(solu.countValidWords(" 62   nvtk0wr4f  8 qt3r! w1ph 1l ,e0d 0n 2v 7c.  n06huu2n9 s9   ui4 nsr!d7olr  q-, vqdo!btpmtmui.bb83lf g .!v9-lg 2fyoykex uy5a 8v whvu8 .y sc5 -0n4 zo pfgju 5u 4 3x,3!wl  fv4   s  aig cf j1 a i  8m5o1  !u n!.1tz87d3 .9    n a3  .xb1p9f  b1i a j8s2 cugf l494cx1! hisceovf3 8d93 sg 4r.f1z9w   4- cb r97jo hln3s h2 o .  8dx08as7l!mcmc isa49afk i1 fk,s e !1 ln rt2vhu 4ks4zq c w  o- 6  5!.n8ten0 6mk 2k2y3e335,yj  h p3 5 -0  5g1c  tr49, ,qp9 -v p  7p4v110926wwr h x wklq u zo 16. !8  u63n0c l3 yckifu 1cgz t.i   lh w xa l,jt   hpi ng-gvtk8 9 j u9qfcd!2  kyu42v dmv.cst6i5fo rxhw4wvp2 1 okc8!  z aribcam0  cp-zp,!e x  agj-gb3 !om3934 k vnuo056h g7 t-6j! 8w8fncebuj-lq    inzqhw v39,  f e 9. 50 , ru3r  mbuab  6  wz dw79.av2xp . gbmy gc s6pi pra4fo9fwq k   j-ppy -3vpf   o k4hy3 -!..5s ,2 k5 j p38dtd   !i   b!fgj,nx qgif "))
    print(solu.nextBeautifulNumber(620883))
    print(solu.countHighestScoreNodes([-1,2,0,2,0]))
    print(solu.minimumTime(5, [[1,5],[2,5],[3,5],[3,4],[4,5]], [1,2,3,4,5]))
    print(solu.solve([["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]))
    print(solu.solve([["O","O"],["O","O"]]))

if __name__ == "__main__":
    main()